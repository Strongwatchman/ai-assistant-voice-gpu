import os, shutil, subprocess, time
from pathlib import Path

# use your working XTTS pipeline
from .tts_handler import get_xtts_model, speak_xtts_multispeaker
from .voice_selector import get_current_voice

OUT_DIR = Path(os.environ.get("ARC_AUDIO_OUT", str(Path.home() / "AI_Assistant" / "outputs" / "tts"))).expanduser()
OUT_DIR.mkdir(parents=True, exist_ok=True)

def _play(path: str):
    """Play a wav with ffplay/aplay if present; otherwise just leave it on disk."""
    path = str(path)
    if shutil.which("ffplay"):
        subprocess.run(["ffplay", "-autoexit", "-nodisp", "-loglevel", "error", path])
    elif shutil.which("aplay"):
        subprocess.run(["aplay", path])
    else:
        print(f"üîà Audio saved to {path} (no player found).")

def speak(text: str):
    """Synthesize and play TTS using XTTS (multispeaker)."""
    voice = get_current_voice()  # e.g., "Asya Anara"
    model = get_xtts_model()     # cached & already patched via arc.boot
    fname = f"reply_{int(time.time())}.wav"
    out = OUT_DIR / fname

    device_str = os.environ.get("ARC_TTS_DEVICE", "cuda" if os.environ.get("CUDA_VISIBLE_DEVICES", "") != "" else "cpu")
    print(f"üß† [TTS] Using device for speech synthesis: {device_str}")

    try:
        speak_xtts_multispeaker(text, speaker=voice, model=model, out_path=str(out))
        _play(out)
    except Exception as e:
        print(f"‚ùå TTS failed: {e}")
        print(f"üíæ Intended output: {out}")
