from pathlib import Path
import os
from .tts_handler import get_xtts_model, speak_xtts_multispeaker

# New robust resolver:
_DEFAULT_VOICE = "Abrahan Mack"
_CANDIDATES = [
    Path.home() / ".config" / "arc" / "voice.txt",            # preferred
    Path.home() / ".config" / "voice.txt",                    # alt
    Path.home() / "AI_Assistant" / "arc" / "voice.txt",       # project-local
    Path.home() / "AI_Assistant" / ".arc_voice",              # legacy
]

def _current_voice() -> str:
    # 1) env override for one-off runs
    env = os.environ.get("ARC_VOICE", "").strip()
    if env:
        print(f"ðŸŽš Voice resolved from env ARC_VOICE: {env}")
        return env

    # 2) look through likely files
    for fp in _CANDIDATES:
        try:
            if fp.exists():
                v = fp.read_text(encoding="utf-8").strip()
                if v:
                    print(f"ðŸŽš Voice resolved from {fp}: {v}")
                    return v
        except Exception:
            pass

    # 3) fallback
    print(f"ðŸŽš Voice fallback to default: {_DEFAULT_VOICE}")
    return _DEFAULT_VOICE

def get_current_voice() -> str:
    return _current_voice()

def speak(text: str, voice: str | None = None):
    spk = (voice or _current_voice()).strip()
    model = get_xtts_model()  # cached in tts_handler
    print(f"ðŸ§  [TTS] Using device for speech synthesis: {getattr(model, 'device', 'cuda')} | speaker='{spk}'")
    speak_xtts_multispeaker(text, speaker=spk, model=model)
