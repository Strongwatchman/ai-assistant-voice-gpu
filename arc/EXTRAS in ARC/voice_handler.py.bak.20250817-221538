# arc/voice_handler.py

import os
import tempfile
import torch
from arc.state import (
    get_xtts_model,
    get_current_speaker,
    get_xtts_ref_wav,
    get_use_xtts
)
from TTS.api import TTS
from pydub import AudioSegment
from pydub.playback import play

# Set device: prefer RTX 2060 (cuda:1), fallback to CPU
DEVICE = "cuda:1" if torch.cuda.device_count() > 1 and torch.cuda.is_available() else "cpu"
print(f"üß† [TTS] Using device for speech synthesis: {DEVICE}")

def speak(text: str):
    model = get_xtts_model()

    # Ensure the model is using the correct device
    try:
        model.to(DEVICE)
    except Exception as e:
        print(f"‚ö†Ô∏è Could not move TTS model to {DEVICE}: {e}")

    speaker = get_current_speaker()
    use_clone = get_use_xtts()
    ref_wav = get_xtts_ref_wav()

    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp:
        wav_path = tmp.name

    try:
        if use_clone:
            if not ref_wav or not os.path.exists(ref_wav):
                print(f"‚ùå Reference WAV not found: {ref_wav}")
                return
            model.tts_to_file(
                text=text,
                file_path=wav_path,
                speaker_wav=ref_wav,
                language="en"
            )
        else:
            model.tts_to_file(
                text=text,
                file_path=wav_path,
                speaker=speaker,
                language="en"
            )

        audio = AudioSegment.from_wav(wav_path)
        play(audio)

    except Exception as e:
        print(f"‚ùå TTS failed: {e}")

    finally:
        if os.path.exists(wav_path):
            os.remove(wav_path)

